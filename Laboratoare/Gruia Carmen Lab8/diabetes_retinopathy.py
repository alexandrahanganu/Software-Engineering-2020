# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hq0pb3aj6mdMLv90YWMIU4m8zT_j-BG5
"""

# Commented out IPython magic to ensure Python compatibility.
# Modelul prezice un diagnostic pentru retinopatia diabetica pe baza unei imagini a unei retine. Clasa 0 reprezinta ochi sanatosi, clasa 1 reprezinta o stare blanda, clasa 2 moderata,clasa 3
#severa iar clasa 4 proliferativa.


# load dependencies

# misc
import datetime
import os, sys, shutil

# basics
import numpy as np
from numpy import loadtxt
import pandas as pd
from tqdm import tqdm

# charting
import matplotlib.pyplot as plt
# %matplotlib inline 
from PIL import Image
import seaborn as sns

# metrics
from sklearn.metrics import confusion_matrix, cohen_kappa_score

# keras
from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import EarlyStopping, ReduceLROnPlateau
from keras import optimizers, applications
from keras.applications import VGG19
from keras import layers
from keras.layers import Dense, Dropout, GlobalAveragePooling2D, Input
from keras import models
from keras.models import Model
from keras.models import load_model
from keras import optimizers
from keras.applications import ResNet50


# set file path variables
train_path = '/content/drive/My Drive/dataset2/train_images/'
test_path = '/content/drive/My Drive/dataset2/test_images/'

train_data = pd.read_csv('/content/drive/My Drive/dataset2/train.csv')
test_data = pd.read_csv('/content/drive/My Drive/dataset2/test.csv')

# look at training data
train_data.head()

# number of images in test & train data
print('Number of images in training set is {}'.format(len(train_data)))
print('Number of images in test set is {}'.format(len(test_data)))

# store the class information in some variables for convenience
class_labels = [0,1,2,3,4]
class_dict = {0:'No DR', 1:'Mild DR', 2:'Moderate DR', 3:'Severe DR', 4:'Proliferative DR'}
class_list = ['No DR', 'Mild DR', 'Moderate DR', 'Severe DR', 'Proliferative DR']

# look at the distribution of the training data into the 5 classes
train_data.diagnosis.value_counts()

# plot the distribution of images by class
fig, ax = plt.subplots(1, 1, figsize=(15,10))
plt.hist(train_data.diagnosis, 5, facecolor='blue', alpha=0.5)
plt.xlabel('Classification')
plt.ylabel('Frequency')
plt.title(r'Distribution of Images by Diagnostic Class')
plt.show()

# function to show some images
def show_15_images(df, category):
    # category is 0, 1, 2, 3, 4
    rows = 3
    columns = 5
    fig, ax = plt.subplots(rows, columns, figsize=(15,10))
    title = class_list[category]
    images = df[df['diagnosis'] == category][:15].id_code.values
    for sample in range (0, 15):
        image = Image.open(os.path.join(train_path, images[sample] + '.png'))
        col = sample // columns
        row = sample % columns
        ax[col, row].imshow(image)
        ax[col, row].axis('off')
    plt.suptitle(title)
    plt.show()


# look at some class 0 images
show_15_images(train_data, 0)
# look at some class 1 images
show_15_images(train_data, 1)
# look at some class 4 images
show_15_images(train_data, 4)
